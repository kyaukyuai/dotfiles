{
  "name": "atom-utils",
  "version": "0.5.0",
  "description": "A bunch of general purpose utilities for Atom packages",
  "main": "lib/atom-utils.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/abe33/atom-utils.git"
  },
  "keywords": [
    "atom",
    "utils"
  ],
  "author": {
    "name": "Cédric Néhémie",
    "email": "cedric.nehemie@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/abe33/atom-utils/issues"
  },
  "homepage": "https://github.com/abe33/atom-utils",
  "dependencies": {
    "event-kit": "^1",
    "mixto": "^1"
  },
  "devDependencies": {
    "jasmine-focused": "1.x",
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-cli": "~0.1.8",
    "grunt": "~0.4.1",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-shell": "~0.2.2",
    "grunt-coffeelint": "0.0.6",
    "promise": "*"
  },
  "readme": "## atom-utils\n\n[![Build Status](https://travis-ci.org/abe33/atom-utils.svg?branch=master)](https://travis-ci.org/abe33/atom-utils)\n\nA bunch of general purpose utilities for Atom packages.\n\n### requirePackages\n\nReturns a promise that is only resolved when all the requested packages have been activated.\n\n```coffee\n{requirePackages} = require 'atom-utils'\n\nrequirePackages('tree-view', 'find-and-replace', 'snippets')\n.then ([treeView, findAndReplace, snippets]) ->\n  # Do something with the required packages\n```\n\n### AncestorsMethods\n\nA mixin that provides jQuery a like method to retrieve a node's parents:\n\n```coffee\n{AncestorsMethods} = require 'atom-utils'\n\nclass DummyNode extends HTMLElement\n  AncestorsMethods.includeInto(this)\n\n  attachedCallback: ->\n    # Returns all the ancestors to the html element\n    parents = @parents()\n\n    # Returns all the ancestors that matches the selector\n    filteredParents = @parents('selector')\n\n# It creates the custom element and register with as the `dummy-node` tag.\nDummyNode = document.registerElement 'dummy-node', prototype: DummyNode.prototype\n```\n\n### DisposableEvents\n\nA mixin that provides a `addDisposableEventListener` method that registers an event listener on an element and returns a `Disposable` to unregister it:\n\n```coffee\n{DisposableEvents} = require 'atom-utils'\n{CompositeDisposable} = require 'event-kit'\n\nclass DummyNode extends HTMLElement\n  DisposableEvents.includeInto(this)\n\n  createdCallback: ->\n    @subscriptions = new CompositeDisposable\n\n    @subscriptions.add @addDisposableEventListener this, 'click', (e) =>\n      # ...\n\n# It creates the custom element and register with as the `dummy-node` tag.\nDummyNode = document.registerElement 'dummy-node', prototype: DummyNode.prototype\n```\n\n### EventsDelegation\n\nA mixin that provides events delegation ala jQuery without jQuery.\nUse it by including it into your custom element:\n\n```coffee\n{EventsDelegation} = require 'atom-utils'\n{CompositeDisposable} = require 'event-kit'\n\nclass DummyNode extends HTMLElement\n  # It includes the mixin on the class prototype.\n  EventsDelegation.includeInto(this)\n\n  # Custom element's callback on creation.\n  createdCallback: ->\n    @subscriptions = new CompositeDisposable\n\n    @appendChild(document.createElement('div'))\n    @firstChild.appendChild(document.createElement('span'))\n\n    # Without a target and a selector, it registers to the event on the\n    # element itself.\n    # The `subscribeTo` method returns a disposable that unsubscribe from\n    # all the events that was added by this call.\n    @subscriptions.add @subscribeTo\n      click: (e) ->\n        console.log(\"won't be called if the click is done on the child div\")\n\n    # With just a selector, it registers to the event on the elements children\n    # matching the passed-in selector.\n    @subscriptions.add @subscribeTo 'div',\n      click: (e) ->\n        console.log(\"won't be called if the click is done on the child span\")\n        # Events propagation can be used to prevents the delegated handlers\n        # to catch the events in continuation.\n        e.stopPropagation()\n\n    # By passing a node and a selector, it registers to the event on the\n    # elements children matching the passed-in selector.\n    @subscriptions.add @subscribeTo @firstChild, 'span',\n      click: (e) ->\n        e.stopPropagation()\n\n# It creates the custom element and register with as the `dummy-node` tag.\nDummyNode = document.registerElement 'dummy-node', prototype: DummyNode.prototype\n```\n\n### ResizeDetection\n\nAs there is no standard way to detect when an element size changed this mixin provides a DOM polling mechanism to custom element whose display and logic may rely on the element size:\n\n```coffee\n{ResizeDetection} = require 'atom-utils'\n\nclass DummyNode extends HTMLElement\n  ResizeDetection.includeInto(this)\n\n  # Starts the DOM poll when the element is attached\n  attachedCallback: -> @initializeDOMPolling()\n\n  # Stops the DOM poll when the element is detached\n  detachedCallback: -> @disposeDOMPolling()\n\n  # Callback called when the poll routine has detected a size change.\n  # The callback receive the new width and height as arguments.\n  resizeDetected: (width, height) ->\n\n  # If you need to prevent the poll routine to check the element size,\n  # redefine this method with your own conditions. The function should return\n  # false when the polling can occurs.\n  # isDOMPollingPrevented: -> @domPollingPaused\n```\n\nIf you need to suspend the polling while keeping the interval active you can use the `pauseDOMPolling` to pause the polling routine and `resumeDOMPolling` to resume it.\n\n### SpacePenDSL\n\nA mixin that provides the same content creation mechanism as `space-pen` but for custom elements:\n\n```coffee\n{SpacePenDSL} = require 'atom-utils'\n\nclass DummyNode extends HTMLElement\n  SpacePenDSL.includeInto(this)\n\n  @content: ->\n    @div outlet: 'container', class: 'container', =>\n      @span outlet: 'label', class: 'label'\n\n  createdCallback: ->\n    # Content is available in the created callback\n\n# It creates the custom element and register with as the `dummy-node` tag.\nDummyNode = document.registerElement 'dummy-node', prototype: DummyNode.prototype\n```\n",
  "readmeFilename": "README.md",
  "_id": "atom-utils@0.5.0",
  "dist": {
    "shasum": "1ecb6a0b6feba03111a3b00073250d9032d68c2c"
  },
  "_from": "atom-utils@0.5.x",
  "_resolved": "https://registry.npmjs.org/atom-utils/-/atom-utils-0.5.0.tgz"
}
